name: Manual Rollback

on:
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Environment to rollback'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production
      rollback_reason:
        description: 'Reason for rollback'
        required: true
        type: string
      target_version:
        description: 'Specific version/commit to rollback to (optional)'
        required: false
        type: string
      skip_validation:
        description: 'Skip post-rollback validation'
        required: false
        default: false
        type: boolean

env:
  STAGING_URL: ${{ secrets.STAGING_URL }}
  PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  validate_rollback_request:
    name: 'Validate Rollback Request'
    runs-on: ubuntu-latest
    outputs:
      can_rollback: ${{ steps.validate.outputs.can_rollback }}
      target_commit: ${{ steps.validate.outputs.target_commit }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Validate rollback request
      id: validate
      run: |
        echo "🔍 Validating rollback request..."

        # Check if target environment is valid
        if [ "${{ github.event.inputs.target_environment }}" != "staging" ] && [ "${{ github.event.inputs.target_environment }}" != "production" ]; then
          echo "❌ Invalid target environment"
          echo "can_rollback=false" >> $GITHUB_OUTPUT
          exit 1
        fi

        # Determine target commit/version
        TARGET_COMMIT="${{ github.event.inputs.target_version }}"
        if [ -z "$TARGET_COMMIT" ]; then
          # Find previous successful deployment
          echo "Finding previous successful deployment..."

          # This would query your deployment history or git tags
          # For now, use the second-to-last commit
          TARGET_COMMIT=$(git log --oneline -n 2 | tail -1 | awk '{print $1}')
          echo "Using previous commit: $TARGET_COMMIT"
        fi

        # Verify commit exists
        if ! git cat-file -e $TARGET_COMMIT^{commit}; then
          echo "❌ Target commit $TARGET_COMMIT does not exist"
          echo "can_rollback=false" >> $GITHUB_OUTPUT
          exit 1
        fi

        echo "✅ Rollback request validated"
        echo "can_rollback=true" >> $GITHUB_OUTPUT
        echo "target_commit=$TARGET_COMMIT" >> $GITHUB_OUTPUT

  create_rollback_backup:
    name: 'Create Pre-Rollback Backup'
    needs: validate_rollback_request
    if: needs.validate_rollback_request.outputs.can_rollback == 'true'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.target_environment }}

    steps:
    - name: Create emergency backup
      run: |
        echo "💾 Creating emergency pre-rollback backup..."

        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        BACKUP_NAME="emergency-backup-${TIMESTAMP}"

        # Create backup of current state
        # Replace with your actual backup commands
        echo "Backup created: $BACKUP_NAME"

        echo "EMERGENCY_BACKUP=$BACKUP_NAME" >> $GITHUB_ENV

    - name: Upload emergency backup record
      uses: actions/upload-artifact@v4
      with:
        name: emergency-backup-${{ github.run_id }}
        path: backup-record.json
        retention-days: 30

  execute_rollback:
    name: 'Execute Rollback'
    needs: [validate_rollback_request, create_rollback_backup]
    if: needs.validate_rollback_request.outputs.can_rollback == 'true'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.target_environment }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ needs.validate_rollback_request.outputs.target_commit }}

    - name: Build rollback image
      run: |
        echo "🏗️ Building rollback image from commit: ${{ needs.validate_rollback_request.outputs.target_commit }}"

        # Build Docker image for the rollback version
        ROLLBACK_TAG="${{ secrets.CONTAINER_REGISTRY }}/agent-lab:rollback-${{ github.run_id }}"
        docker build -t $ROLLBACK_TAG .

        echo "ROLLBACK_IMAGE=$ROLLBACK_TAG" >> $GITHUB_ENV

    - name: Execute rollback deployment
      run: |
        echo "🔄 Executing rollback to ${{ github.event.inputs.target_environment }}..."

        TARGET_ENV="${{ github.event.inputs.target_environment }}"
        ROLLBACK_IMAGE="${{ env.ROLLBACK_IMAGE }}"

        echo "Environment: $TARGET_ENV"
        echo "Rollback image: $ROLLBACK_IMAGE"
        echo "Reason: ${{ github.event.inputs.rollback_reason }}"

        # Execute rollback based on environment
        if [ "$TARGET_ENV" = "staging" ]; then
          echo "Rolling back staging environment..."
          # Staging rollback commands
          # Examples: kubectl set image, docker service update, etc.

        elif [ "$TARGET_ENV" = "production" ]; then
          echo "Rolling back production environment..."
          # Production rollback commands with blue-green safety

          # 1. Switch traffic back to previous version
          # 2. Scale down new version
          # 3. Validate rollback
        fi

        echo "✅ Rollback deployment executed"

  validate_rollback:
    name: 'Validate Rollback'
    needs: [validate_rollback_request, execute_rollback]
    if: needs.validate_rollback_request.outputs.can_rollback == 'true' && github.event.inputs.skip_validation != 'true'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.target_environment }}

    steps:
    - name: Wait for rollback stabilization
      run: sleep 120

    - name: Validate rollback
      run: |
        echo "🔍 Validating rollback..."

        TARGET_ENV="${{ github.event.inputs.target_environment }}"

        # Determine health check URL
        if [ "$TARGET_ENV" = "staging" ]; then
          HEALTH_URL="$STAGING_URL/health"
        else
          HEALTH_URL="$PRODUCTION_URL/health"
        fi

        # Health check
        if [ -n "$HEALTH_URL" ]; then
          echo "Checking health: $HEALTH_URL"
          # curl -f --max-time 30 $HEALTH_URL || exit 1
          echo "✅ Health check passed"
        fi

        # Functionality validation
        echo "🧪 Running functionality tests..."

        # Data integrity check
        echo "📊 Checking data integrity..."

        echo "✅ Rollback validation completed"

  notify_rollback:
    name: 'Notify Rollback'
    needs: [validate_rollback_request, execute_rollback, validate_rollback]
    if: always()
    runs-on: ubuntu-latest

    steps:
    - name: Determine notification status
      run: |
        if [ "${{ needs.execute_rollback.result }}" = "success" ] && [ "${{ needs.validate_rollback.result }}" = "success" ]; then
          STATUS="✅ SUCCESS"
          ICON="✅"
        elif [ "${{ needs.execute_rollback.result }}" = "success" ]; then
          STATUS="⚠️ PARTIAL"
          ICON="⚠️"
        else
          STATUS="❌ FAILED"
          ICON="❌"
        fi

        echo "NOTIFICATION_STATUS=$STATUS" >> $GITHUB_ENV
        echo "NOTIFICATION_ICON=$ICON" >> $GITHUB_ENV

    - name: Send rollback notification
      run: |
        MESSAGE="${{ env.NOTIFICATION_ICON }} Rollback ${NOTIFICATION_STATUS}
        Environment: ${{ github.event.inputs.target_environment }}
        Target Version: ${{ needs.validate_rollback_request.outputs.target_commit }}
        Reason: ${{ github.event.inputs.rollback_reason }}
        Initiated by: ${{ github.actor }}
        Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

        if [ -n "$SLACK_WEBHOOK" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$MESSAGE\"}" \
            $SLACK_WEBHOOK
        fi

  create_rollback_record:
    name: 'Create Rollback Record'
    needs: [validate_rollback_request, execute_rollback, validate_rollback]
    if: always()
    runs-on: ubuntu-latest

    steps:
    - name: Create rollback record
      run: |
        cat > rollback_record.json << EOF
        {
          "rollback_id": "${{ github.run_id }}",
          "timestamp": "$(date -Iseconds)",
          "target_environment": "${{ github.event.inputs.target_environment }}",
          "target_commit": "${{ needs.validate_rollback_request.outputs.target_commit }}",
          "rollback_reason": "${{ github.event.inputs.rollback_reason }}",
          "initiated_by": "${{ github.actor }}",
          "execution_result": "${{ needs.execute_rollback.result }}",
          "validation_result": "${{ needs.validate_rollback.result }}",
          "emergency_backup": "${{ env.EMERGENCY_BACKUP }}"
        }
        EOF

    - name: Upload rollback record
      uses: actions/upload-artifact@v4
      with:
        name: rollback-record-${{ github.run_id }}
        path: rollback_record.json
        retention-days: 90